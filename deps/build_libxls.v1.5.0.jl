using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libxlsreader"], :libxlsreader),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/davidanthoff/LibXlsBuilder/releases/download/v1.5.0-build.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/libxls.v1.5.0.aarch64-linux-gnu.tar.gz", "b4c53db431428bb467caff1b2ccd4bfe363c34557ddb551eccae59a686a612ab"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/libxls.v1.5.0.aarch64-linux-musl.tar.gz", "9ab0240cf1c5bb3a8aeab76cef4e154ae46eda7d39a1fa57e65380b397b61023"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/libxls.v1.5.0.arm-linux-gnueabihf.tar.gz", "503ec6463f47bbcdec0ddc71dc9cd10197d68df922d1921cbb0e8d109efbe823"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/libxls.v1.5.0.arm-linux-musleabihf.tar.gz", "c4e9a1208f58bef9637d71d446be0801efd681c39cdd32513c2ebe7d6029c7cc"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/libxls.v1.5.0.i686-linux-gnu.tar.gz", "45102a7389aa0642d07c19e9c71f3664f6fe3f0019014977090ba3556a6b431e"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/libxls.v1.5.0.i686-linux-musl.tar.gz", "052a932c6d0d8b372c3e79dc5efa8b93198271c44a6eaeb5ade163ad3f48c73c"),
    Windows(:i686) => ("$bin_prefix/libxls.v1.5.0.i686-w64-mingw32.tar.gz", "d5fa2df9e2fe5305277ca852bde945e2d290c5da905921daf9a9d819be104e0c"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/libxls.v1.5.0.powerpc64le-linux-gnu.tar.gz", "0fcdefe6b415270e27400c898d681f98b56e8b4c350484c1b4c50911ef2fa757"),
    MacOS(:x86_64) => ("$bin_prefix/libxls.v1.5.0.x86_64-apple-darwin14.tar.gz", "5e03f39a2514d87bb51b124be189e86aaf2b5b9ff5a54ad957f5739f98f5c001"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/libxls.v1.5.0.x86_64-linux-gnu.tar.gz", "342d0871ceb672b5bf94392bf01976cf3b2750d2fa5dec797035635319460e2b"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/libxls.v1.5.0.x86_64-linux-musl.tar.gz", "86ba42003e715ee8ad20dfd26d16133fe07d11f47e33bfb87592cad4caffec0e"),
    FreeBSD(:x86_64) => ("$bin_prefix/libxls.v1.5.0.x86_64-unknown-freebsd11.1.tar.gz", "f3cb597b425e917620911c2fe318c5b20f33b2b6b597465a65b4dbe0c4c92bae"),
    Windows(:x86_64) => ("$bin_prefix/libxls.v1.5.0.x86_64-w64-mingw32.tar.gz", "a23777a94c3f14dc7fb8bb9f702ea3f7a7735f13f848fd71c7fe3f1ed569c1ba"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
